#include <iostream>
#include <string>

//enum в public
static unsigned currentNumber = 0;

class Table
{
public:
	enum Type { INT, STRING};

	Table()
	{
		nameOfTable = "name1";
		typeOfData = Type::INT;
		number = ++currentNumber;
	}

	Table(const std::string& name, Type type) //мога външно да достъпвам типовете на enum
	{
		nameOfTable = name;
		typeOfData = type;
		number = ++currentNumber;
	}

	void print() const
	{
		std::cout << "Name of table: " << nameOfTable << ", type: " << typeOfData << ", number: " << number << std::endl;
	}

private:
	std::string nameOfTable;
	Type typeOfData;
	int number;
};

//enum в private
class Table
{
public:
	Table()
	{
		nameOfTable = "name1";
		typeOfData = Type::INT;
		number = ++currentNumber;
	}

	Table(const std::string& name, const std::string& type) //не мога външно да достъпвам типовете на enum, затова използвам string
	{
		nameOfTable = name;
		if (type == "INT")
		{
			typeOfData = Type::INT;
		}
		else
		{
			typeOfData = Type::STRING;
		}
		number = ++currentNumber;
	}

	const std::string getType() const //с++ не позволява типа на връщане да бъде const std::string&
	{
		if (typeOfData == Type::INT)
		{
			return "INT";
		}
		else
		{
			return "String";
		}
	}

	void print() const
	{
		std::cout << "Name of table: " << nameOfTable << ", type: " << getType() << ", number: " << number << std::endl;
	}

private:
	std::string nameOfTable;
	enum Type {INT, STRING} typeOfData;
	int number;
};
